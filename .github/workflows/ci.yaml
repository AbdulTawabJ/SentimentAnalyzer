name: CI/CD Pipeline to GCP Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    # Define environment variables at the job level to be accessible by all steps
    env:
      # Your Google Cloud Project ID.
      GCP_PROJECT_ID: sentimentanalyzer25
      # The region where your Artifact Registry repository is located and where you deploy Cloud Run.
      GCP_REGION: asia-southeast2
      # The name of your Docker repository in Google Cloud Artifact Registry.
      # Based on your last file, you've set this to 'default'.
      GCP_ARTIFACT_REGISTRY_REPO: default

      # The desired name for your Docker image within the repository.
      # Based on your last file, you've set this to 'new_image'.
      IMAGE_NAME: new_image

      # Construct the full image path required by Artifact Registry:
      # [REGION]-docker.pkg.dev/[PROJECT-ID]/[REPOSITORY-NAME]/[IMAGE-NAME]
      # This path identifies the image location within the registry.
      IMAGE_FULL_PATH: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run automated tests
      run: |
        export PYTHONPATH=.
        pytest tests/

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use Artifact Registry
      # This command configures Docker to use gcloud as a credential helper for the specified region.
      # Ensure this region matches your Artifact Registry repository region.
      # Accessing job-level env variables using ${{ env.VAR_NAME }} in run commands.
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Build and Push Docker Image to Artifact Registry
      env:
        # The tag for this specific image build (using the commit SHA for uniqueness).
        # This tag differentiates different versions of the same image name.
        IMAGE_TAG: ${{ github.sha }}

      run: |
        # Print the values of the environment variables for debugging
        # Accessing job-level env variables using ${{ env.VAR_NAME }} in run commands.
        echo "GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}"
        echo "GCP_REGION: ${{ env.GCP_REGION }}"
        echo "GCP_ARTIFACT_REGISTRY_REPO: ${{ env.GCP_ARTIFACT_REGISTRY_REPO }}"
        echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
        echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"
        echo "Full image tag being used: ${{ env.IMAGE_FULL_PATH }}:${{ env.IMAGE_TAG }}"

        # Build the Docker image with the correct full tag (path + tag)
        # Accessing job-level env variables using ${{ env.VAR_NAME }} in run commands.
        docker build -t ${{ env.IMAGE_FULL_PATH }}:${{ env.IMAGE_TAG }} .
        # Push the tagged image to the Artifact Registry repository
        # Accessing job-level env variables using ${{ env.VAR_NAME }} in run commands.
        docker push ${{ env.IMAGE_FULL_PATH }}:${{ env.IMAGE_TAG }}

    - name: Deploy to Cloud Run
      env:
        # The name of your Cloud Run service.
        SERVICE_NAME: sentiment-analyzer-service
        # The full image path and tag to deploy to Cloud Run.
        # This must match the tag used in the build/push step.
        # Accessing job-level env variables using ${{ env.VAR_NAME }} in run commands.
        IMAGE_TO_DEPLOY: ${{ env.IMAGE_FULL_PATH }}:${{ env.IMAGE_TAG }}

      run: |
        # Print the image path being used for deployment for debugging
        # Accessing job-level env variables using ${{ env.VAR_NAME }} in run commands.
        echo "Image being deployed to Cloud Run: ${{ env.IMAGE_TO_DEPLOY }}"
        # Deploy the image to Cloud Run
        # Accessing job-level env variables using ${{ env.VAR_NAME }} in run commands.
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_TO_DEPLOY }} \
          --region ${{ env.GCP_REGION }} \
          --platform managed \
          --allow-unauthenticated # Adjust permissions as needed
