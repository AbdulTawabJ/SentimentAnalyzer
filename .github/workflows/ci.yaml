# This workflow builds a Docker image of your Python application,
# pushes it to Google Cloud Artifact Registry, and deploys it
# to Google Cloud Run.

name: CI/CD Pipeline to GCP Cloud Run

# Configure the workflow to run on pushes and pull requests to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    # Specify the runner environment
    runs-on: ubuntu-latest

    # Define environment variables at the job level.
    # These variables are accessible to all steps within this job using $VAR_NAME in run commands.
    env:
      # Your Google Cloud Project ID. Replace with your actual Project ID.
      GCP_PROJECT_ID: sentimentanalyzer25
      # The region where your Artifact Registry repository is located and where you deploy Cloud Run.
      # Ensure this matches the region you chose in GCP.
      GCP_REGION: asia-southeast2
      # IMPORTANT: Replace 'your-artifact-registry-repo-name' below with the actual name
      # of your Docker repository you created in Google Cloud Artifact Registry.
      # This is the repository where your Docker images will be stored.
      # You MUST create this repository in GCP before running the pipeline.
      GCP_ARTIFACT_REGISTRY_REPO: default # <--- **REPLACE THIS PLACEHOLDER with your ACTUAL REPOSITORY NAME**

      # The desired name for your Docker image within the repository.
      # This is the base name of the image itself, within the repository.
      IMAGE_NAME: new_image # You can change this name if you prefer

      # The name of your Cloud Run service.
      # This service will be created if it doesn't exist.
      SERVICE_NAME: sentiment-analyzer-service

      # NOTE: IMAGE_FULL_PATH is removed from here. It will be constructed in the steps below.

    steps:
    - name: Checkout code
      # Checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      uses: actions/checkout@v4

    - name: Set up Python
      # Sets up a Python environment.
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      # Installs Python dependencies from requirements.txt.
      run: |
        pip install -r requirements.txt

    - name: Run automated tests
      # Executes your application's tests using pytest.
      run: |
        export PYTHONPATH=.
        pytest tests/

    - name: Authenticate to Google Cloud
      # Authenticates the workflow using the provided service account key.
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }} # Ensure you have this secret configured in GitHub

    - name: Set up Google Cloud SDK
      # Sets up the gcloud command-line tool.
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use Artifact Registry
      # Configures Docker to use gcloud as a credential helper for the specified region.
      # This allows Docker to authenticate with Artifact Registry.
      # Accessing job-level env variables using $VAR_NAME in run commands.
      run: gcloud auth configure-docker $GCP_REGION-docker.pkg.dev

    - name: Build and Push Docker Image to Artifact Registry
      # Builds your Docker image and pushes it to Artifact Registry.
      # It constructs the full image path and tag dynamically.
      run: |
        # Construct the full image path using job-level env variables
        # Format: [REGION]-docker.pkg.dev/[PROJECT-ID]/[REPOSITORY-NAME]/[IMAGE-NAME]
        FULL_IMAGE_PATH="$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_ARTIFACT_REGISTRY_REPO/$IMAGE_NAME"

        # Use the commit SHA as the unique tag for this image build
        IMAGE_TAG="${{ github.sha }}"

        # Combine path and tag for the full image identifier
        FULL_IMAGE_TAG="$FULL_IMAGE_PATH:$IMAGE_TAG"

        echo "GCP_PROJECT_ID: $GCP_PROJECT_ID"
        echo "GCP_REGION: $GCP_REGION"
        echo "GCP_ARTIFACT_REGISTRY_REPO: $GCP_ARTIFACT_REGISTRY_REPO"
        echo "IMAGE_NAME: $IMAGE_NAME"
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "Full image tag being built/pushed: $FULL_IMAGE_TAG"

        # Build the Docker image with the correct full tag
        docker build -t "$FULL_IMAGE_TAG" .

        # Push the tagged image to the Artifact Registry repository
        docker push "$FULL_IMAGE_TAG"

    - name: Deploy to Cloud Run
      # Deploys the newly built and pushed Docker image to Cloud Run.
      run: |
        # Construct the full image path again (consistent with build step)
        FULL_IMAGE_PATH="$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_ARTIFACT_REGISTRY_REPO/$IMAGE_NAME"

        # Use the commit SHA as the tag (must match the pushed image)
        IMAGE_TAG="${{ github.sha }}"

        # Combine path and tag for the image to deploy
        IMAGE_TO_DEPLOY="$FULL_IMAGE_PATH:$IMAGE_TAG"

        echo "Image being deployed to Cloud Run: $IMAGE_TO_DEPLOY"
        echo "Deploying to service: $SERVICE_NAME in region $GCP_REGION"

        # Deploy the image to Cloud Run
        gcloud run deploy "$SERVICE_NAME" \
          --image "$IMAGE_TO_DEPLOY" \
          --region "$GCP_REGION" \
          --platform managed \
          --allow-unauthenticated # Adjust permissions as needed